{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "65eaea9a-7185-4115-b618-e4fa0f34cff1",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name '_name_' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 105\u001b[0m\n\u001b[1;32m    102\u001b[0m             \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mad_id\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m headers:\n\u001b[1;32m    103\u001b[0m                 summarize_dataset(file, group_by\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpage_id\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mad_id\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[0;32m--> 105\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[43m_name_\u001b[49m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_main_\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    106\u001b[0m     main()\n",
      "\u001b[0;31mNameError\u001b[0m: name '_name_' is not defined"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "import os\n",
    "import math\n",
    "from collections import defaultdict, Counter\n",
    "\n",
    "DATASETS = {\n",
    "    \"fb_ads\": \"2024_fb_ads_president_scored_anon.csv\",\n",
    "    \"fb_posts\": \"2024_fb_posts_president_scored_anon.csv\",\n",
    "    \"tw_posts\": \"2024_tw_posts_president_scored_anon.csv\"\n",
    "}\n",
    "\n",
    "MAX_GROUPS = 5  # Limit number of groups shown per grouping\n",
    "MAX_COLS = 15   # Limit number of columns to display per group\n",
    "\n",
    "def is_float(value):\n",
    "    try:\n",
    "        float(value)\n",
    "        return True\n",
    "    except ValueError:\n",
    "        return False\n",
    "\n",
    "def summarize_column(data):\n",
    "    numeric_data = [float(x) for x in data if is_float(x)]\n",
    "    text_data = [x for x in data if not is_float(x)]\n",
    "\n",
    "    summary = {\"count\": len(data)}\n",
    "\n",
    "    if numeric_data:\n",
    "        mean = sum(numeric_data) / len(numeric_data)\n",
    "        std_dev = math.sqrt(sum((x - mean) ** 2 for x in numeric_data) / len(numeric_data))\n",
    "        summary.update({\n",
    "            \"mean\": round(mean, 2),\n",
    "            \"min\": min(numeric_data),\n",
    "            \"max\": max(numeric_data),\n",
    "            \"std_dev\": round(std_dev, 2)\n",
    "        })\n",
    "\n",
    "    if text_data:\n",
    "        counter = Counter(text_data)\n",
    "        summary.update({\n",
    "            \"unique_values\": len(counter),\n",
    "            \"most_frequent\": counter.most_common(1)[0]\n",
    "        })\n",
    "\n",
    "    return summary\n",
    "\n",
    "def summarize_dataset(filepath, group_by=None):\n",
    "    print(f\"\\nüóÇ Processing: {filepath} {'[Grouped by ' + ', '.join(group_by) + ']' if group_by else ''}\")\n",
    "    \n",
    "    with open(filepath, newline='', encoding='utf-8') as csvfile:\n",
    "        reader = csv.DictReader(csvfile)\n",
    "        data = list(reader)\n",
    "\n",
    "    if not data:\n",
    "        print(\"‚ö†Ô∏è Empty dataset.\")\n",
    "        return\n",
    "\n",
    "    columns = reader.fieldnames[:MAX_COLS]  # Limit columns for display\n",
    "    if group_by:\n",
    "        grouped_data = defaultdict(list)\n",
    "        for row in data:\n",
    "            key = tuple(row[col] for col in group_by if col in row)\n",
    "            grouped_data[key].append(row)\n",
    "\n",
    "        print(f\"üìä Total groups: {len(grouped_data)}. Showing first {MAX_GROUPS}...\\n\")\n",
    "        for idx, (group_key, rows) in enumerate(grouped_data.items()):\n",
    "            if idx >= MAX_GROUPS:\n",
    "                print(\"... (truncated additional groups)\\n\")\n",
    "                break\n",
    "            print(f\"üîπ Group: {group_key}\")\n",
    "            group_summary = defaultdict(list)\n",
    "            for row in rows:\n",
    "                for col in columns:\n",
    "                    group_summary[col].append(row[col])\n",
    "            for col in columns:\n",
    "                print(f\"  {col}: {summarize_column(group_summary[col])}\")\n",
    "            print(\"-\" * 50)\n",
    "    else:\n",
    "        column_data = defaultdict(list)\n",
    "        for row in data:\n",
    "            for col in columns:\n",
    "                column_data[col].append(row[col])\n",
    "        for col in columns:\n",
    "            print(f\"{col}: {summarize_column(column_data[col])}\")\n",
    "        print(\"-\" * 50)\n",
    "\n",
    "def main():\n",
    "    for name, file in DATASETS.items():\n",
    "        if not os.path.exists(file):\n",
    "            print(f\"‚ùå File not found: {file}\")\n",
    "            continue\n",
    "\n",
    "        # Full summary\n",
    "        summarize_dataset(file)\n",
    "\n",
    "        # Group by page_id\n",
    "        summarize_dataset(file, group_by=[\"page_id\"])\n",
    "\n",
    "        # Group by page_id + ad_id (only if ad_id exists in dataset)\n",
    "        with open(file, newline='', encoding='utf-8') as f:\n",
    "            headers = csv.DictReader(f).fieldnames\n",
    "            if \"ad_id\" in headers:\n",
    "                summarize_dataset(file, group_by=[\"page_id\", \"ad_id\"])\n",
    "\n",
    "if _name_ == \"_main_\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ee32fe8-ac3d-46d6-9626-78aeb67273a5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "caff9250-02f0-4785-9b9e-16943d292013",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
